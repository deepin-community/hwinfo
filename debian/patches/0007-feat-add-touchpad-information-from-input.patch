From 76868855dbabcdd84429475a9e870d6c9ece5b94 Mon Sep 17 00:00:00 2001
From: shuaijie <shuaijie@uniontech.com>
Date: Wed, 11 Oct 2023 15:55:16 +0800
Subject: [PATCH] feat: add touchpad information from input

some proc file handle no mouse may miss touchpad

Log: add touchpad information from input
---
 src/hd/hd.h    |   2 +-
 src/hd/input.c | 209 ++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 206 insertions(+), 5 deletions(-)

diff --git a/src/hd/hd.h b/src/hd/hd.h
index ad17edf..f4ae9b0 100644
--- a/src/hd/hd.h
+++ b/src/hd/hd.h
@@ -168,7 +168,7 @@ typedef enum base_classes {
   bc_storage_device, bc_network_interface, bc_keyboard, bc_printer,
   bc_hub, bc_braille, bc_scanner, bc_joystick, bc_chipcard, bc_camera,
   bc_framebuffer, bc_dvb, bc_tv, bc_partition, bc_dsl, bc_bluetooth, bc_fingerprint,
-  bc_mmc_ctrl
+  bc_mmc_ctrl,bc_touchpad
 } hd_base_classes_t;
 
 /** subclass values of bc_monitor */
diff --git a/src/hd/input.c b/src/hd/input.c
index edf94ae..37cfc53 100644
--- a/src/hd/input.c
+++ b/src/hd/input.c
@@ -23,6 +23,14 @@
 static void get_input_devices(hd_data_t *hd_data);
 static char *all_bits(char *str);
 static int test_bit(const char *str, unsigned bit);
+static hd_base_classes_t test_pointers(
+    const __u16 *id_bus,
+    const unsigned long *bitmask_ev,
+    const unsigned long *bitmask_abs,
+    const unsigned long *bitmask_key,
+    const unsigned long *bitmask_rel,
+    const unsigned long *bitmask_props
+    );
 
 void hd_scan_input(hd_data_t *hd_data)
 {
@@ -82,16 +90,19 @@ void add_joystick_details(hd_data_t *hd_data, hd_t *h, const char *key, const ch
 #define INP_KEY		"B: KEY="
 #define INP_REL		"B: REL="
 #define INP_ABS		"B: ABS="
+#define INP_EV    "B: EV="
+#define INP_PROP  "B: PROP="
+#define INP_SYS   "S: Sysfs="
 
 void get_input_devices(hd_data_t *hd_data)
 {
   hd_t *hd;
   str_list_t *input, *sl, *sl1;
   char *s;
-  unsigned ok, u, is_mouse, is_joystick;
+  unsigned ok, u, is_mouse, is_joystick,is_touchpad;
   unsigned bus, vendor, product, version;
   unsigned mouse_buttons, mouse_wheels;
-  char *name = NULL, *handlers = NULL, *key = NULL, *rel = NULL, *abso = NULL;
+  char *name = NULL, *handlers = NULL, *key = NULL, *rel = NULL, *abso = NULL, *ev = NULL, *prop = NULL, *sysfs = NULL;
   size_t len;
   str_list_t *handler_list;
   hd_dev_num_t dev_num = { type: 'c', range: 1 };
@@ -111,6 +122,11 @@ void get_input_devices(hd_data_t *hd_data)
       if(key) ADD2LOG("  key = %s\n", key);
       if(rel) ADD2LOG("  rel = %s\n", rel);
       if(abso) ADD2LOG("  abs = %s\n", abso);
+      if (ev) ADD2LOG("  rel = %s\n", rel);
+      if (prop) ADD2LOG("  prop = %s\n", prop);
+      if (sysfs) {
+          ADD2LOG("  sysfs = %s\n", sysfs);
+      }
 
       mouse_buttons = 0;
       if(key) {
@@ -133,6 +149,7 @@ void get_input_devices(hd_data_t *hd_data)
 
         is_mouse = strstr(handlers, "mouse") ? 1 : 0;
         is_joystick = strstr(handlers, "js") ? 1 : 0;
+        is_touchpad = test_pointers(bus, ev, abso, key, rel,prop) ? 1 : 0;
 
         if(	// HP Virtual Management Device
           vendor == 0x03f0 &&
@@ -152,7 +169,7 @@ void get_input_devices(hd_data_t *hd_data)
             }
           }
 
-          if(!s && (is_mouse || is_joystick)) for(sl1 = handler_list; sl1; sl1 = sl1->next) {
+          if(!s && (is_mouse || is_joystick|| is_touchpad)) for(sl1 = handler_list; sl1; sl1 = sl1->next) {
             if(sscanf(sl1->str, "event%u", &u) == 1) {
               str_printf(&s, 0, "/dev/input/event%u", u);
               break;
@@ -175,6 +192,10 @@ void get_input_devices(hd_data_t *hd_data)
 		  {
 		    hd->base_class.id = bc_joystick;
 		  }
+      else if (is_touchpad)
+		  {
+		    hd->base_class.id = bc_touchpad;
+		  }
                 }
 
 		if (is_mouse)
@@ -255,7 +276,7 @@ void get_input_devices(hd_data_t *hd_data)
             hd->compat_device.id = MAKE_ID(TAG_SPECIAL, (mouse_wheels << 4) + mouse_buttons);
 
             hd->base_class.id = bc_mouse;
-            if(bus == BUS_ADB) {
+                        if(bus == BUS_ADB) {
               hd->sub_class.id = sc_mou_bus;
               hd->bus.id = bus_adb;
             }
@@ -296,6 +317,8 @@ void get_input_devices(hd_data_t *hd_data)
 
             add_str_list(&hd->unix_dev_names, hd->unix_dev_name);
             add_str_list(&hd->unix_dev_names, hd->unix_dev_name2);
+            if(sysfs)
+              hd->sysfs_id = new_str(sysfs);
 
             for(sl1 = handler_list; sl1; sl1 = sl1->next) {
               if(sscanf(sl1->str, "event%u", &u) == 1) {
@@ -307,6 +330,34 @@ void get_input_devices(hd_data_t *hd_data)
               }
             }
           }
+	  // touchpad          
+          else if(is_touchpad) {
+            hd = add_hd_entry(hd_data, __LINE__, 0);
+
+            hd->vendor.id = MAKE_ID(0, vendor);
+            hd->device.id = MAKE_ID(0, product);
+
+            hd->base_class.id = bc_mouse;
+            if (bus == BUS_I2C) {
+                hd->sub_class.id = sc_mou_bus;
+                hd->bus.id = bus_serial;
+            }
+
+            hd->device.name = new_str(name);
+            if(sysfs)
+            hd->sysfs_id = new_str(sysfs);
+
+
+            for (sl1 = handler_list; sl1; sl1 = sl1->next) {
+                if (sscanf(sl1->str, "event%u", &u) == 1) {
+                    s = NULL;
+                    str_printf(&s, 0, "/dev/input/event%u", u);
+                    add_str_list(&hd->unix_dev_names, s);
+                    s = free_mem(s);
+                    break;
+                }
+            }
+          }
 	  // joystick
           else if(is_joystick) {
             hd = add_hd_entry(hd_data, __LINE__, 0);
@@ -362,6 +413,9 @@ void get_input_devices(hd_data_t *hd_data)
       key = free_mem(key);
       rel = free_mem(rel);
       abso = free_mem(abso);
+      ev = free_mem(ev);
+      prop = free_mem(prop);
+      sysfs = free_mem(sysfs);      
     }
 
     if(sscanf(sl->str, "I: Bus=%04x Vendor=%04x Product=%04x Version=%04x", &bus, &vendor, &product, &version) == 4) {
@@ -404,6 +458,26 @@ void get_input_devices(hd_data_t *hd_data)
       abso = all_bits(abso);
       continue;
     }
+
+    if (!strncmp(sl->str, INP_EV, sizeof INP_EV - 1)) {
+        s = sl->str + sizeof INP_EV - 1;
+        ev = canon_str(s, strlen(s));
+        ev = all_bits(ev);
+        continue;
+    }
+
+    if (!strncmp(sl->str, INP_PROP, sizeof INP_PROP - 1)) {
+        s = sl->str + sizeof INP_PROP - 1;
+        prop = canon_str(s, strlen(s));
+        prop = all_bits(prop);
+        continue;
+    }
+
+    if (!strncmp(sl->str, INP_SYS, sizeof INP_SYS - 1)) {
+        s = sl->str + sizeof INP_SYS - 1;
+        sysfs = canon_str(s, strlen(s));
+        continue;
+    }        
   }
 
   free_str_list(input);
@@ -452,5 +526,132 @@ int test_bit(const char *str, unsigned bit)
   return (u & mask) ? 1 : 0;
 }
 
+#define FALSE 0
+#define TRUE 1
+#define test2_bit(bit,str)   (test_bit(str,bit) ? TRUE : FALSE)
+/* pointer devices */
+hd_base_classes_t test_pointers(const __u16 *id_bus,
+    const unsigned long *bitmask_ev,
+    const unsigned long *bitmask_abs,
+    const unsigned long *bitmask_key,
+    const unsigned long *bitmask_rel,
+    const unsigned long *bitmask_props
+    )
+{
+    unsigned has_abs_coordinates = FALSE;
+    unsigned has_rel_coordinates = FALSE;
+    unsigned has_mt_coordinates = FALSE;
+    unsigned has_joystick_axes_or_buttons = FALSE;
+    unsigned has_pad_buttons = FALSE;
+    unsigned is_direct = FALSE;
+    unsigned has_touch = FALSE;
+    unsigned has_3d_coordinates = FALSE;
+    unsigned has_keys = FALSE;
+    unsigned has_stylus = FALSE;
+    unsigned has_pen = FALSE;
+    unsigned finger_but_no_pen = FALSE;
+    unsigned has_mouse_button = FALSE;
+    unsigned is_mouse = FALSE;
+    unsigned is_touchpad = FALSE;
+    unsigned is_touchscreen = FALSE;
+    unsigned is_tablet = FALSE;
+    unsigned is_tablet_pad = FALSE;
+    unsigned is_joystick = FALSE;
+    unsigned is_accelerometer = FALSE;
+    unsigned is_pointing_stick = FALSE;
+
+    has_keys = test2_bit(EV_KEY, bitmask_ev);
+    has_abs_coordinates = test2_bit(ABS_X, bitmask_abs) && test2_bit(ABS_Y, bitmask_abs);
+    has_3d_coordinates = has_abs_coordinates && test2_bit(ABS_Z, bitmask_abs);
+    is_accelerometer = test2_bit(INPUT_PROP_ACCELEROMETER, bitmask_props);
+
+    if (!has_keys && has_3d_coordinates)
+        is_accelerometer = TRUE;
+
+    if (is_accelerometer) {
+        return bc_none;
+    }
+
+    is_pointing_stick = test2_bit(INPUT_PROP_POINTING_STICK, bitmask_props);
+    has_stylus = test2_bit(BTN_STYLUS, bitmask_key);
+    has_pen = test2_bit(BTN_TOOL_PEN, bitmask_key);
+    finger_but_no_pen = test2_bit(BTN_TOOL_FINGER, bitmask_key) && !test2_bit(BTN_TOOL_PEN, bitmask_key);
+    for (int button = BTN_MOUSE; button < BTN_JOYSTICK && !has_mouse_button; button++)
+        has_mouse_button = test2_bit(button, bitmask_key);
+    has_rel_coordinates = test2_bit(EV_REL, bitmask_ev) && test2_bit(REL_X, bitmask_rel) && test2_bit(REL_Y, bitmask_rel);
+    has_mt_coordinates = test2_bit(ABS_MT_POSITION_X, bitmask_abs) && test2_bit(ABS_MT_POSITION_Y, bitmask_abs);
+
+    /* unset has_mt_coordinates if devices claims to have all abs axis */
+    if (has_mt_coordinates && test2_bit(ABS_MT_SLOT, bitmask_abs) && test2_bit(ABS_MT_SLOT - 1, bitmask_abs))
+        has_mt_coordinates = FALSE;
+    is_direct = test2_bit(INPUT_PROP_DIRECT, bitmask_props);
+    has_touch = test2_bit(BTN_TOUCH, bitmask_key);
+    has_pad_buttons = test2_bit(BTN_0, bitmask_key) && has_stylus && !has_pen;
+
+    /* joysticks don't necessarily have buttons; e. g.
+     * rudders/pedals are joystick-like, but buttonless; they have
+     * other fancy axes. Others have buttons only but no axes.
+     *
+     * The BTN_JOYSTICK range starts after the mouse range, so a mouse
+     * with more than 16 buttons runs into the joystick range (e.g. Mad
+     * Catz Mad Catz M.M.O.TE). Skip those.
+     */
+    if (!test2_bit(BTN_JOYSTICK - 1, bitmask_key)) {
+        for (int button = BTN_JOYSTICK; button < BTN_DIGI && !has_joystick_axes_or_buttons; button++)
+            has_joystick_axes_or_buttons = test2_bit(button, bitmask_key);
+        for (int button = BTN_TRIGGER_HAPPY1; button <= BTN_TRIGGER_HAPPY40 && !has_joystick_axes_or_buttons; button++)
+            has_joystick_axes_or_buttons = test2_bit(button, bitmask_key);
+        for (int button = BTN_DPAD_UP; button <= BTN_DPAD_RIGHT && !has_joystick_axes_or_buttons; button++)
+            has_joystick_axes_or_buttons = test2_bit(button, bitmask_key);
+    }
+    for (int axis = ABS_RX; axis < ABS_PRESSURE && !has_joystick_axes_or_buttons; axis++)
+        has_joystick_axes_or_buttons = test2_bit(axis, bitmask_abs);
+
+    if (has_abs_coordinates) {
+        if (has_stylus || has_pen)
+            is_tablet = TRUE;
+        else if (finger_but_no_pen && !is_direct)
+            is_touchpad = TRUE;
+        else if (has_mouse_button)
+            /* This path is taken by VMware's USB mouse, which has
+             * absolute axes, but no touch/pressure button. */
+            is_mouse = TRUE;
+        else if (has_touch || is_direct)
+            is_touchscreen = TRUE;
+        else if (has_joystick_axes_or_buttons)
+            is_joystick = TRUE;
+    } else if (has_joystick_axes_or_buttons)
+        is_joystick = TRUE;
+
+    if (has_mt_coordinates) {
+        if (has_stylus || has_pen)
+            is_tablet = TRUE;
+        else if (finger_but_no_pen && !is_direct)
+            is_touchpad = TRUE;
+        else if (has_touch || is_direct)
+            is_touchscreen = TRUE;
+    }
+
+    if (is_tablet && has_pad_buttons)
+        is_tablet_pad = TRUE;
+
+    if (!is_tablet && !is_touchpad && !is_joystick &&
+        has_mouse_button &&
+        (has_rel_coordinates ||
+         !has_abs_coordinates)) /* mouse buttons and no axis */
+        is_mouse = TRUE;
+
+    /* There is no such thing as an i2c mouse */
+    if (is_mouse && id_bus == BUS_I2C)
+        is_pointing_stick = TRUE;
+
+    if (is_touchpad)
+        return  bc_touchpad;// printf("ID_INPUT_TOUCHPAD \n");
+
+    return  bc_none;
+}
+#undef FALSE
+#undef TRUE
+
 /** @} */
 
-- 
2.20.1

